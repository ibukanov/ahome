#!/bin/bash

set -e -u -o pipefail
shopt -s nullglob lastpipe

log() {
    printf "%s\n" "$*" 1>&2
}

warn() {
    log "$@"
}

err() {
    log "$@"
    log "stack: ${FUNCNAME[*]}"
    exit 1
}

cmd_log() {
    test $# -ge 1 || err "command must be given"
    log "$*"
    "$@"
}

backup_paths=()
backup_targets=()
backup_media_dir=

password_dir=

local_backup_root=
#backup_url=gdocs://igor@mir2.org/backup/home

password_hash_name=".password.backup"

check_single_required_arg() {
    [[ ${#args[@]} -eq 1 && ${#args[0]} -ne 0 ]] || \
	err "$cmd takes exactly one non-empty argument"
}

read_config() {
    config="$1"
    [[ -s $config ]] || err "$config does not exist or empty"

    read_config_lines < $config
}

read_config_lines() {
    local -a line
    while read -a line; do
	# Skip blanks lines and comments
	[[ ${#line[@]} -eq 0 || ${line[0]:0:1} == '#' ]] && continue
	local cmd="${line[0]}"
	local -a args=("${line[@]:1}")
	case "$cmd" in
	    BackupPath )
		check_single_required_arg
		local dir
		dir="${args[0]}"
		backup_paths+=("${dir}")
		;;

	    PasswordDir )
		check_single_required_arg
		password_dir="${args[0]}"
		;;

	    BackupTarget )
		[[ ${#args[@]} -ge 1 && ${#args[@]} -le 2 ]] || \
		    err "$cmd takes one or two arguments"
		backup_targets+=("${args[0]}" "${args[1]-}")
		;;

	    BackupMediaDir )
		check_single_required_arg
		local dir="${args[0]}"
		[[ ${dir:0:1} != / ]] || \
		    err "$cmd argument $dir is not a relative path"
		backup_media_dir="$dir"
		;;
	esac
    done
}

check_config() {
    [[ ${#backup_paths[@]} -ge 1 ]] || \
	err "at least one BackupPath must be given"
    [[ ${#backup_targets[@]} -ge 1 || $backup_media_dir ]] || \
	err "at least one BackupTarget or BackupMediaDir must be given"
    [[ $password_dir ]] || \
	err "missing PasswordDir"

    if [[ $backup_media_dir ]]; then
	local media_top="/run/media/$user"
	[[ -d $media_top ]] || media_top="/media/$user"
	[[ -d $media_top ]] || \
	    err "failed to locate directory with external media"
	local location found=
	for location in "$media_top"/*; do
	    [[ -d $location ]] || continue
	    if [[ -d $location/$backup_media_dir ]]; then
		[[ -z $found ]] || \
		    err "$backup_media_dir exists both in $location and $found. Keep mounted only the desired media and try again."
		found="$location"
	    fi
	done
	[[ $found ]] || \
	    err "failed to find in $media_top media with $backup_media_dir directory"
	local_backup_root="$found/$backup_media_dir"
    fi
    if ! test "$local_backup_root"; then
	local_backup_root="$HOME/.backup"
    fi
    if ! test -e "$local_backup_root" && ! test -h "$local_backup_root"; then
	mkdir "$local_backup_root"
    elif ! test -d "$local_backup_root"; then
	err "$local_backup_root exists and is not a directory"
    fi
    local_backup_root="$local_backup_root/borg"

    backup_url="file://$local_backup_root"

    local path
    for path in "${backup_paths[@]}"; do
	[[ -d $path || -d $path ]] || \
	    err "BackupPath $path is not a directory or a file"
    done

    [[ -d $password_dir ]] || \
	err "PasswordDir $password_dir is not a directory"
    password_hash_location="$password_dir/$password_hash_name"
}

change_password() {
    local sratus
    u-kit set-password-hash --title backup "$password_hash_location" \
	| IFS="" read -r status
    [[ $status == "done" || $status == "canceled" ]] || \
	err "unexpected u-kit output: $status"
}

read_password() {
    password="$(a/bin/u-kit ask-password -t backup -p "$password_hash_location")"
}

create_local_backup() {

    if test ! -d "$local_backup_root"; then
	rm -rf "$local_backup_root.tmp"
	printf %s "$password" | \
	    BORG_PASSPHRASE_FD=0 borg init -e repokey "$local_backup_root.tmp"
	mv "$local_backup_root.tmp" "$local_backup_root"
    fi

    local -a args=(--progress --compress=zlib "$local_backup_root::home-{now}")
    local path
    for path in "${backup_paths[@]}"; do
	args+=("$path")
    done

    printf '%s\n' "$password" | \
	BORG_PASSPHRASE_FD=0 BORG_RELOCATED_REPO_ACCESS_IS_OK=yes \
	borg create "${args[@]}"
}

copy_to_remote() {
    local i target ssh_sock
    for ((i=0; i<${#backup_targets[@]}; i+=2)); do
	target="${backup_targets[i]}"
	ssh_sock="${backup_targets[i+1]}"
	SSH_AUTH_SOCK="${ssh_sock}" \
	    cmd_log rsync -rtl -Pv --delete-after "$local_backup_root" "$target" || :
    done
}

usage() {
    echo "To be written"
}

self="$(realpath "${BASH_SOURCE[-1]}")"

show_usage=
change_password=

while getopts ":hPt" OPT; do
    case "$OPT" in
    h ) show_usage=1 ;;
    P ) change_password=1 ;;
    * ) err "unrecognized shell option - $OPTARG" ;;
    esac
done
shift "$((OPTIND - 1))"

if test "$show_usage"; then
    usage
    exit 0
fi

test $# -eq 0 || err "unexpected argument"


cd "$HOME"
read_config ".local/hsetup/backup.config"
check_config

if [[ $change_password ]]; then
    change_password
    exit 0
fi

read_password

create_local_backup
copy_to_remote
