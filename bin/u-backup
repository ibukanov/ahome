#!/bin/bash

set -e -u
shopt -s nullglob

log() {
    printf "%s\n" "$*" 1>&2
}

warn() {
    log "$@"
}

err() {
    log "$@"
    log "stack: ${FUNCNAME[*]}"
    exit 1
}

cmd_log() {
    test $# -ge 1 || err "command must be given"
    log "$*"
    "$@"
}

backup_paths=()
backup_targets=()
backup_media_dir=

password_dir=

local_backup_root=
backup_url=
#backup_url=gdocs://igor@mir2.org/backup/home

password_hash_name=".password.backup"

check_single_required_arg() {
    [[ ${#args[@]} -eq 1 && ${#args[0]} -ne 0 ]] || \
	err "$cmd takes exactly one non-empty argument"
}

read_config() {
    config="$1"
    [[ -s $config ]] || err "$config does not exist or empty"

    read_config_lines < $config
}

read_config_lines() {
    local -a line
    while read -a line; do
	# Skip blanks lines and comments
	[[ ${#line[@]} -eq 0 || ${line[0]:0:1} == '#' ]] && continue
	local cmd="${line[0]}"
	local -a args=("${line[@]:1}")
	case "$cmd" in
	    BackupPath )
		check_single_required_arg
		local dir="${args[0]}"
		[[ ${dir:0:1} != / ]] || \
		    err "$cmd argument $dir is not a path relative to \$HOME"
		backup_paths+=("$dir")
		;;

	    PasswordDir )
		check_single_required_arg
		password_dir="${args[0]}"
		;;

	    BackupTarget )
		check_single_required_arg
		backup_targets+=("${args[0]}")
		;;

	    BackupMediaDir )
		check_single_required_arg
		local dir="${args[0]}"
		[[ ${dir:0:1} != / ]] || \
		    err "$cmd argument $dir is not a relative path"
		backup_media_dir="$dir"
		;;
	esac
    done
}

check_config() {
    [[ ${#backup_paths[@]} -ge 1 ]] || \
	err "at least one BackupPath must be given"
    [[ ${#backup_targets[@]} -ge 1 || $backup_media_dir ]] || \
	err "at least one BackupTarget or BackupMediaDir must be given"
    [[ $password_dir ]] || \
	err "missing PasswordDir"

    if [[ $backup_media_dir ]]; then
	local media_top="/run/media/$USER"
	[[ -d $media_top ]] || media_top="/media/$USER"
	[[ -d $media_top ]] || \
	    err "failed to locate directory with external media"
	local location found=
	for location in "$media_top"/*; do
	    [[ -d $location ]] || continue
	    if [[ -d $location/$backup_media_dir ]]; then
		[[ -z $found ]] || \
		    err "$backup_media_dir exists both in $location and $found. Keep mounted only the desired media and try again."
		found="$location"
	    fi
	done
	[[ $found ]] || \
	    err "failed to find in $media_top media with $backup_media_dir directory"
	local_backup_root="$found/$backup_media_dir"
    fi
    if [[ -z $local_backup_root ]]; then
	local_backup_root="$HOME/BACKUP/home"
    fi
    backup_url="file://$local_backup_root"

    local path
    for path in "${backup_paths[@]}"; do
	[[ -d $path || -d $path ]] || \
	    err "BackupPath $path is not a directory or a file"
    done

    [[ -d $password_dir ]] || \
	err "PasswordDir $password_dir is not a directory"
    password_hash_location="$password_dir/$password_hash_name"
}

calculate_password_hash() {
    password_hash="$(printf "$1" | u-bcrypt-hash)"
}

change_password() {
    read -p 'You are about to set new password hash to verify the password for future backups, yes? '
    test "_$REPLY" != "_yes" && { echo "Password change was cancelled"; return; }
    read -se -p 'New password:' password
    echo
    read -se -p 'Retype new password:'
    echo
    test "_$password" = "_$REPLY" || { echo "Password mistmatch"; return; }
    password_hash="$(printf "$password" | u-bcrypt-hash)"
    printf "$password_hash" > "$password_hash_location"
}

read_password() {
    test -f "$password_hash_location" || \
	err "$password_hash_location does not exist. Set it up using -P option."
    read stored_password_hash < "$password_hash_location" || :
    test -n "$stored_password_hash" || \
	err "$password_hash_location is empty or cannot be read."
    read -se -p 'Password for backup:' password
    echo
    test -n "$password" || err "Backup password cannot be empty."
    calculate_password_hash "$password"
    printf "$password" | u-bcrypt-hash -c "$stored_password_hash" || \
	err "Password mismatch"
}

duplicity_create_local_backup() {

    read_password

    local top_dir="."
    local -a args=()
    local path
    for path in "${backup_paths[@]}"; do
	args+=(--include "$top_dir/$path")
    done
    args+=(--exclude  '**')
    args+=(--progress)
    PASSPHRASE="$password" duplicity "${args[@]}" "$top_dir" "$backup_url"
}

copy_to_remote() {
    local target
    for target in "${backup_targets[@]:+${backup_targets[@]}}"; do
	cmd_log rsync -rtl -P --delete-after "$local_backup_root" "$target" || :
    done
}

usage() {
    echo "To be written"
}

show_usage=
change_password=


while getopts ":fhlP" OPT; do
    case "$OPT" in
	h ) show_usage=1 ;;
	P ) change_password=1 ;;
	* ) err "unrecognized shell option - $OPTARG" ;;
    esac

done
shift $(($OPTIND - 1))

if [[ $show_usage ]]; then
    usage
    exit 0
fi

[[ $# -ge 1 ]] || err "the profile name argument is missing"
profile_name="$1"
shift
[[ $# -eq 0 ]] || err "unexpected argument after the profile name"

cd "$HOME"

read_config ".local/hsetup/$profile_name.backup.config"
check_config

if [[ $change_password ]]; then
    change_password
    exit 0
fi

duplicity_create_local_backup
copy_to_remote
