#!/bin/sh

# shellcheck shell=dash
# shellcheck enable=all
# shellcheck disable=SC2250,SC2249

set -e -u

self="$(realpath "$0")"
self_top="${self%/*/*}"

log() {
    printf "%s\n" "$*" 1>&2
}

warn() {
    log "$@"
}

err() {
    log "$@"
    exit 1
}

cmd_log() {
    test $# -ge 1 || err "command must be given"
    log "$*"
    "$@"
}

# Append to eargs space-separated arguments with spaces and other special
# characters escaped.
earg() {
  local arg do_escape escaped before_quote
  for arg in "$@"; do
    do_escape=
    case "${arg}" in
    "" | *[!A-Z0-9a-z_.,/:-]*) do_escape=1 ;;
    *) ;;
    esac
    if test -n "${do_escape}"; then
      escaped=
      while : ; do
        before_quote="${arg%%\'*}"
        if test "x${arg}" = "x${before_quote}"; then
          break
        fi
        escaped="${escaped}${before_quote}'\\''"
        arg="${arg#*\'}"
      done
      arg="'${escaped}${arg}'"
    fi
    eargs="${eargs}${eargs:+ }${arg}"
  done
}

escaped_backup_paths=
escaped_backup_targets=
backup_media_dir=

password_dir=

local_backup_root=

password_hash_name=".password.backup"

check_single_required_arg() {
    { test "$arg1" && ! test "$arg2"; } || \
	err "$cmd takes exactly one non-empty argument"
}

read_config() {
    local config
    config="$self_top/local/setup/print-backup-config"
    test -x "$config" || err "$config does not exist or is not an executable file"

    # Workaround for the lack of lastpipe
    local config_text
    config_text="$("$config")"

    local cmd arg1 arg2 eargs
    while read -r cmd arg1 arg2; do
	case "$cmd" in
	# Skip blanks lines and comments
	'' | '#'* ) continue ;;

	BackupPath )
	    check_single_required_arg
	    eargs="$escaped_backup_paths"
	    earg "$arg1"
	    escaped_backup_paths="$eargs"
	    ;;

	PasswordDir )
	    check_single_required_arg
	    password_dir="$arg1"
	    ;;

	BackupTarget )
	    check_single_required_arg
	    eargs="$escaped_backup_targets"
	    earg "$arg1"
	    escaped_backup_targets="$eargs"
	    ;;

	BackupMediaDir )
	    check_single_required_arg
	    case "$arg1" in
	    /* ) "$cmd argument $arg1 is not a relative path" ;;
	    esac
	    backup_media_dir="$arg1"
	    ;;
	esac
    done <<EOF
$config_text
EOF
}

check_config() {
    test "$escaped_backup_paths" || \
	err "at least one BackupPath must be given"
    test "$escaped_backup_targets" || test "$backup_media_dir" || \
	err "at least one BackupTarget or BackupMediaDir must be given"
    test "$password_dir" || \
	err "missing PasswordDir"

    if test "$backup_media_dir"; then
	local user media_top
	user="$(id -un)"
	media_top="/run/media/$user"
	test -d "$media_top" || media_top="/media/$user"
	test -d "$media_top" || \
	    err "failed to locate directory with external media"
	local location found=
	for location in "$media_top"/*; do
	    test -d "$location" || continue
	    if test -d "$location/$backup_media_dir"; then
		test -z "$found" || \
		    err "$backup_media_dir exists both in $location and $found. Keep mounted only the desired media and try again."
		found="$location"
	    fi
	done
	test "$found" || \
	    err "failed to find in $media_top media with $backup_media_dir directory"
	local_backup_root="$found/$backup_media_dir"
    fi
    if ! test "$local_backup_root"; then
	local_backup_root="$HOME/.backup"
    fi
    if ! test -e "$local_backup_root" && ! test -h "$local_backup_root"; then
	mkdir "$local_backup_root"
    elif ! test -d "$local_backup_root"; then
	err "$local_backup_root exists and is not a directory"
    fi
    local_backup_root="$local_backup_root/borg"

    eval "set -- $escaped_backup_paths"
    local path
    for path in "$@"; do
	test -d "$path" || test -d "$path" || \
	    err "BackupPath $path is not a directory or a file"
    done

    test -d "$password_dir" || \
	err "PasswordDir $password_dir is not a directory"
    password_hash_location="$password_dir/$password_hash_name"
}

change_password() {
    local status
    status="$(u-kit set-password-hash --title backup "$password_hash_location")"
    test "$status" = 'done' || test "$status" = 'canceled' || \
	err "unexpected u-kit output: $status"
}

read_password() {
    password="$(a/bin/u-kit ask-password -t backup -p "$password_hash_location")"
}

create_local_backup() {

    if test ! -d "$local_backup_root"; then
	rm -rf "$local_backup_root.tmp"
	printf %s "$password" | \
	    BORG_PASSPHRASE_FD=0 borg init -e repokey "$local_backup_root.tmp"
	mv "$local_backup_root.tmp" "$local_backup_root"
    fi

    set --
    set -- "$@" --progress --compress=auto,zstd,6
    set -- "$@" "$local_backup_root::home-{now}"
    eval 'set -- "$@" '"$escaped_backup_paths"

    printf '%s\n' "$password" | \
	BORG_PASSPHRASE_FD=0 BORG_RELOCATED_REPO_ACCESS_IS_OK=yes \
	borg create "$@"
}

# shellcheck disable=SC2120
copy_to_remote() {
    eval "set -- $escaped_backup_targets"
    local target
    for target in "$@"; do
	cmd_log rsync -rtl -Pv --delete-after "$local_backup_root" "$target" || :
    done
}

usage() {
    echo "To be written"
}

show_usage=
change_password=

while getopts ":hPt" OPT; do
    case "$OPT" in
    h ) show_usage=1 ;;
    P ) change_password=1 ;;
    * ) err "unrecognized shell option - $OPTARG" ;;
    esac
done
shift "$((OPTIND - 1))"

if test "$show_usage"; then
    usage
    exit 0
fi

test $# -eq 0 || err "unexpected argument"


cd "$HOME"

# Workaround for the lack of lastpipe
read_config
check_config

if test "$change_password"; then
    change_password
    exit 0
fi

read_password

create_local_backup
copy_to_remote
