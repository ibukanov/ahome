#!/bin/sh

#shellcheck shell=dash
#shellcheck enable=all
#shellcheck disable=SC2250

set -e -u

self="$(realpath "$0")"

#shellcheck source=SCRIPTDIR/../lib/utils.sh
. "${self%/*/*}/lib/utils.sh"

is_so_login_required_stderr() {
    local status stderr
    status="$1"
    stderr="$2"
    test "$status" -eq 255 || return 1
    case "$stderr" in
    *" aws sso login "* ) return 0 ;;
    *"Error loading SSO Token"* ) return 0 ;;
    esac
    return 1
}

run_aws() {
    if test "$aws_region"; then
        set -- --region "$aws_region" "$@"
    fi
    capture_status_stdout_stderr aws "$@"
    if ! is_so_login_required_stderr "$R" "$R2"; then
        printf '%s' "$R2" >&2
        printf '%s' "$R1"
        return "$R"
    fi
    aws sso login >&2
    aws "$@"
}

is_sso_login_required() {
    local status aws_stderr
    status="$1"
    aws_stderr="$2"
    test "$status" = 255 || return 1
    test "${aws_stderr%' aws sso login '*}" != "$aws_stderr"
}

run_descrbe_instances() {
    local query format
    query="$1"
    format="${2-text}"
    set -- ec2 describe-instances
    if test "${ec2_id-}"; then
        set -- "$@" --instance-ids "$ec2_id"
    elif test "${ec2_tag-}"; then
        set -- "$@" --filters "Name=tag:Name,Values=$ec2_tag"
    fi
    set -- "$@" --query "$query"
    set -- "$@" --output "$format"
    run_aws "$@"
}

print_ec2_ipv4() {
    run_descrbe_instances 'Reservations[*].Instances[*].PublicIpAddress'
}

ensure_ec2_id() {
    if ! test "${ec2_id-}"; then
        ec2_id="$(run_descrbe_instances 'Reservations[*].Instances[*].InstanceId')"
    fi
}

Cmd_ipv4() {
    print_ec2_ipv4
}

Cmd_ssh_proxy() {
    local ipv4

    # ssh redirects stderr to null, so log to tty if we have one
    if has_writable_tty; then
        exec 2> /dev/tty
    fi
    ipv4="$(print_ec2_ipv4)"
    if ! test "$ipv4"; then
        err "No IP is associated with EC2 instance. Perhaps it is not running."
    fi
    exec nc "$ipv4" 22
}

Cmd_hibernate() {
    ensure_ec2_id
    set -- ec2 stop-instances --hibernate
    set -- "$@" --instance-ids "$ec2_id"
    run_aws "$@"
}

Cmd_start() {
    ensure_ec2_id
    set -- ec2 start-instances
    set -- "$@" --instance-ids "$ec2_id"
    run_aws "$@"
}

Cmd_status() {
    run_descrbe_instances 'Reservations[*].Instances[*]' yaml
}

aws_region=
unset ec2_id
unset ec2_tag

while getopts i:r:t: opt; do
    case "$opt" in
        i ) ec2_id="$OPTARG";;
        r ) aws_region="$OPTARG";;
        t ) ec2_tag="$OPTARG";;
        * ) err "unknown option '$opt'";;
    esac
done
shift $((OPTIND - 1))

command="$1"
shift
"Cmd_$command" "$@"

