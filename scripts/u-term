#!/bin/bash

set -e -u

err() {
    printf 'Error: %s\n' "$*" >&2
    exit 1
}

check_xfce_terminal=
check_lxterminal=

cmd=()
declare -i maximize=0
declare -i fullscreen=0
width=""
height=""
wide=1
permanent_title=""

host=""
title=""
declare -a ssh_options=()

while [[ $# -gt 0 && $1 == --* ]]; do
    case $1 in
	-- ) shift; break ;;
	--host=* ) host="${1:7}";;
	--ssh-option=* ) ssh_options+=("${1:13}");;
	--title=* ) title="${2:8}";;
	* ) err "invalid option $1. Use -- to pass terminal-specific options." ;;
    esac
    shift
done

if [[ -z $host ]]; then
    name="$(basename "$0")"
    case $name in
	u-term ) host="" ;;
	u-*-term ) host="${name:2:-5}" ;;
	* ) err "unknown base name: $name" ;;
    esac
fi

if [[ -z $title ]]; then
    if [[ -z $host ]]; then
	title="localhost"
    else
	title="$host"
    fi
fi

if [[ $host ]]; then
    cmd+=(ssh -t "${ssh_options[@]:+${ssh_options[@]}}")

    # On CoreOS tmux session is teminated the moment ssh exits unless
    # we tun it as systemd unit so use a helper there.
    what="\
test -x /opt/bin/tmux-attach && exec /opt/bin/tmux-attach
tmux list-sessions > /dev/null 2>&1 || tmux new-session -d
exec tmux attach"
    cmd+=("$host" "$what")
fi

if [[ -z "$width" ]]; then
    width=102

    display_width="$(xdpyinfo | grep dimensions | grep -o '[0-9]\+x[0-9]\+ pix' | cut -dx -f1  2>/dev/null)"
    [[ -n "$display_width" ]] || display_width=1366

    # Guess that 2300 is laptop with a retina dispaly where maximize is wanted
    if let 'display_width < 1400 || display_width > 2300'; then
	let maximize=1
    fi

    if let wide; then
	if [[ "$display_width" -le 1366 ]]; then
	    width=192
	else
	    width=203
	fi
    fi
fi

if let maximize; then
    # Non-Gnome desktops luck a convinient keyboard shortcut to access
    # panel with time/status information from full screen and their
    # panels when configured to autohide are not accessible with mouse
    # from fullscreen either.
    if [[ "${DESKTOP_SESSION,,}" == gnome ]]; then
	let fullscreen=1
    fi
fi

[[ -n "$height" ]] || height=35

# for debugging
# exec "${cmd[@]}"

term=

if [[ $check_xfce_terminal ]]; then
    term="$(which Terminal 2>/dev/null || true)"
    [[ -n "$term" ]] || term="$(which xfce4-terminal 2>/dev/null || true)"
fi
if [[ -n "$term" ]]; then
    args=(
	"--working-directory=$HOME"
	"--title=$title"
	--hide-menubar
	--disable-server
    )
    if let fullscreen; then
	args+=(--fullscreen)
    elif let maximize; then
	args+=(--maximize)
    else
	args+=(--geometry=${width}x${height})
    fi
    if [[ ${#cmd[@]} -ne 0 ]]; then
	args+=(-x "${cmd[@]}")
    fi
    exec "$term" "${args[@]}"
fi

if [[ $check_lxterminal ]]; then
    term="$(which lxterminal 2>/dev/null || true)"
fi
if [[ -n "$term" ]]; then
    args=(
	--working-directory="$HOME"
	--title="$title"
    )
    if let maximize; then
	# lxterm does not have maximized option
	args+=(--geometry=193x52)
    else
	args+=(--geometry${width}x${height})
    fi
    if [[ ${#cmd[@]} -ne 0 ]]; then
	args+=(-e "${cmd[@]}")
    fi
    exec "$term" "${args[@]}"
fi

term="$(which xterm 2>/dev/null || true)"
if [[ -n "$term" ]]; then
    res=(
# fonts
"*.renderFont: true"
"*.faceName: Monospace:size=9"
"Xft.hintstyle: hintmedium"
"Xft.hinting: true"
"Xft.rgba: rgb"
"Xft.antialias: true"

# color palette
"*color0: rgb:0000/0000/0000"
"*color1: rgb:7851/0000/0000"
"*color2: rgb:0000/6666/0000"
"*color3: rgb:7d70/3eb8/0000"
"*color4: rgb:0000/0000/8000"
"*color5: rgb:7851/0000/7851"
"*color6: rgb:0000/7851/7851"
"*color7: rgb:aaaa/aaaa/aaaa"
"*color8: rgb:5555/5555/5555"
"*color9: rgb:b333/3bbb/3bbb"
"*color10: rgb:3259/970a/3259"
"*color11: rgb:cf5b/cf5b/451e"
"*color12: rgb:41b5/41b5/c51e"
"*color13: rgb:b333/3bbb/b333"
"*color14: rgb:3bbb/b333/b333"
"*color15: rgb:ffff/ffff/ffff"

# Alt-char sends escape sequences
"*.metaSendsEscape: true"

# access windows functions
"*disallowedWindowOps: GetIconTitle,GetSelection,GetWinPosition,GetWinSizePixels,GetWinState,GetWinTitle,LowerWin,MaximizeWin,FullscreenWin,MinimizeWin,RaiseWin,RefreshWin,RestoreWin,SetWinLines,SetWinPosition,SetWinSizeChars,SetWinSizePixels,SetXprop"

# Keybindings - for Ctrl-Tab I use codes that Cygwin's mintty sends

"*.vt100.translations: #override \
  Ctrl Shift <KeyPress> C:  copy-selection(CLIPBOARD) \n\
  Ctrl Shift <KeyPress> V:  insert-selection(CLIPBOARD) \n\
  \
  Ctrl ~Shift <Key>Tab: string(0x1b) string(\"[1;5I\") \n\
  Ctrl Shift <Key>Tab: string(0x1b) string(\"[1;6I\") \n\
"
    )

    [[ -z "$permanent_title" ]] || res+=("*.vt100.allowTitleOps: false")

    args=()
    args+=(-bg rgb:d0/ff/ff -fg rgb:0/0/0)

    if let maximize; then
	args+=(-maximized)
    else
	args+=(-geometry ${width}x${height})
    fi
    args+=(-title "$title")

    # disable scrollbar and visual bell
    args+=(+sb +vb +mb)

    #args+=(-fa "Monospace:size=8")

    for i in "${res[@]}"; do args+=("-xrm" "$i"); done

    if [[ ${#cmd[@]} -ne 0 ]]; then
	args+=(-e "${cmd[@]}")
    fi

    exec xterm "${args[@]}"
fi

args=(
    --hide-menubar
    --working-directory="$HOME"
    --title="$title"
)
if let fullscreen; then
    args+=(--full-screen)
elif let maximize; then
    args+=(--maximize)
else
    args+=(--geometry ${width}x${height})
fi
if [[ ${#cmd[@]} -ne 0 ]]; then
    args+=(-x "${cmd[@]}")
fi
exec gnome-terminal "${args[@]}"
